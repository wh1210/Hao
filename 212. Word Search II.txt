//-----------------------------------------------------------------------
// DFS-backtracking
class Solution {
    boolean[][] visited;
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new LinkedList<>();
        for (String word : words) {
            visited = new boolean[board.length][board[0].length];
            if (exist(board, word) && !res.contains(word)) {
                res.add(word);
            }
        }
        return res;
    }
    
    
    public boolean exist(char[][] board, String word) {
        if (word.equals("")) return false;
        
        boolean res = false;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    res = existHelper(board, word, i, j, 0);
                }
                if (res) return res;
            }
        }
        return res;
    }
    
    public boolean existHelper(char[][] board, String word, int i, int j, int index) {
        if (index >= word.length()) {
            return true;
        }
             
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length) {
            return false;
        }
        
        if (visited[i][j]) return false;

        if (board[i][j] != word.charAt(index)) return false;
        
        visited[i][j] = true;
        
        if (existHelper(board, word, i + 1, j, index + 1) || existHelper(board, word, i - 1, j, index + 1)
            || existHelper(board, word, i, j + 1, index + 1) || existHelper(board, word, i, j - 1, index + 1)) return true;
        visited[i][j] = false;
        
        return false;
    }
}


//------------------------------------------------------------------------------------------
// Trie
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new LinkedList<>();
        TrieNode root = buildTrie(words);
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                dfs (board, i, j, res, root);
            }
        }
        return res;
    }
    
    private void dfs(char[][] board, int i, int j, List<String> res, TrieNode curr) {
        char c = board[i][j];
        if (c == '#' || curr.next[c - 'a'] == null) return;
        curr = curr.next[c - 'a'];
        if (curr.word != null) {
            res.add(curr.word);
            curr.word = null;
        }
        board[i][j] = '#';
        if (i > 0) dfs(board, i - 1, j, res, curr);
        if (i < board.length - 1) dfs(board, i + 1, j, res, curr);
        if (j > 0) dfs(board, i, j - 1, res, curr);
        if (j < board[0].length - 1) dfs(board, i, j + 1, res, curr);
        board[i][j] = c;
    }
    
    private TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        for (String word : words) {
            TrieNode curr = root;
            for (char c : word.toCharArray()) {
                if (curr.next[c - 'a'] == null) {
                    curr.next[c - 'a'] = new TrieNode();
                }
                curr = curr.next[c - 'a'];
            }
            curr.word = word;
        }
        return root;
    }
    
    private class TrieNode {
        public TrieNode[] next;
        public String word;
        
        public TrieNode() {
            next = new TrieNode[26];
        }
    }
}
