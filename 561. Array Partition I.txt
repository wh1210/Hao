//---------------------------------------------------------------------------
// One approach copyed from website.
// Using quicksort to sort the array.

class Solution {
    public int arrayPairSum(int[] nums) {
        if (nums == null || nums.length == 0)
            return 0;
        quickSort(nums, 0, nums.length - 1);
        int sum = 0;
        for (int i = 0; i < nums.length; i += 2) {
            System.out.print(nums[i] + "," + nums[i+1] + ",");
            sum += nums[i];
        }
        return sum;
    }
    
    private void quickSort(int[] nums, int left, int right) {
        //System.out.println("Call " + left + " and " + right);
        if (left >= right)
            return;
        int l = left - 1;
        int r = right + 1;
        int pivot = nums[left];
        while(l < r) {
            while(nums[++l] < pivot);
            while(nums[--r] > pivot);
            if (l < r) {
                int temp = nums[r];
                nums[r] = nums[l];
                nums[l] = temp;
            }
        }
        //System.out.println(" pivot " + l);
        quickSort(nums, left, r);
        quickSort(nums, r + 1, right);
    }
}

//---------------------------------------------------------------------------
// One approach use built-in method of array to sort
// Sort the array, then plus the element every two intervals.
class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int result = 0;
        for (int i = 0; i < nums.length; i+=2) {
            result += nums[i];
        }
        return result;
    }
}

//---------------------------------------------------------------------------
// brute force
// Not debugged. So far it gets wrong answer.
class Solution {
    int max_result = Integer.MIN_VALUE;
    
    public int arrayPairSum(int[] nums) {
        permute(nums, 0);
        return max_result;
    }
    
    private void permute (int[] nums, int index) {
        for (int i = index; i < nums.length - 1; i++) {
            for (int j = index + 1; j < nums.length; j++) {
                swap(nums, i, j);
                max_result = Math.max(max_result, sum(nums));
                swap(nums, i, j);
            }
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    private int sum (int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i+=2) {
            sum += Math.min(nums[i], nums[i + 1]);
        }
        return sum;
    }
}

//------------------------------------------------------------------
// beats 99.5%
// an Amazing way to sort with limited range.
class Solution {
    public int arrayPairSum(int[] nums) {
        int[] auxiliary = new int[20001];
        for (int num : nums) {
            auxiliary[num + 10000] ++;
        }
        int half = nums.length / 2;
        int sum = 0;
        int judge = 1;
        for (int i = 0; i < auxiliary.length; i++) {
            while (auxiliary[i] != 0) {
                if (judge % 2 == 1) {
                    sum += (i - 10000);
                    half--;
                }
                judge++;
                auxiliary[i]--;
                
                if (half == 0) {
                    return sum;
                }
            }
        }
        throw new IllegalArgumentException("Something wrong");
    }
}
