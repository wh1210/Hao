class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(res, candidates, target, new ArrayList<>(), 0, 0);
        return res;
    }
    
    private void backtrack(List<List<Integer>> res, int[] candidates,int target, List<Integer> temp, int sum, int start) {
        if (sum > target) return;
        
        if (sum == target) {
            res.add(new ArrayList<>(temp));
        }
        
        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i - 1]) continue;
            temp.add(candidates[i]);
            sum += candidates[i];
            backtrack(res, candidates, target, temp, sum, i + 1);
            temp.remove(temp.size() - 1);
            sum -= candidates[i];
        }
    }
}
