//----------------------------------------------------------------------------
// Approach #1
// Use Object array in java API. Sort in descending order.
class Solution {
    public int findKthLargest(int[] nums, int k) {
        Integer[] nums1 = new Integer[nums.length];
        for (int i = 0; i < nums.length; i++) {
            nums1[i] = nums[i];
        }
        // Lambda expression.
        Arrays.sort(nums1, (n1, n2) -> (n2 - n1));
        return (int)nums1[k - 1];
    }
}

//--------------------------------------------------------------------
// Approach #2
// Using Arrays.sort directly.
class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length - k];
    }
}

//---------------------------------------------------------------------
// Approach #3
// Heapsort
class Solution {
    public int findKthLargest(int[] nums, int k) {
        heapify(nums, nums.length - 1);
        for (int i = nums.length - 1; i > 0; i--) {
            percolateDown(nums, 0, i);
            int temp = nums[0];
            nums[0] = nums[i];
            nums[i] = temp;
        }
        return nums[nums.length - k];
    }
    
    private void heapify(int[] nums, int limit) {
        for (int i = limit; i >= 0; i--) {
            percolateDown(nums, i, limit);
        }
    }
    
    private void percolateDown(int[] nums, int point, int limit) {
        int index = point;
        while (index <= limit && (index * 2 + 1 <= limit || index * 2 + 2 <= limit)) {
            int value1 = nums[index * 2 + 1];
            int value2 = index * 2 + 2 <= limit ? nums[index * 2 + 2] : Integer.MIN_VALUE;
            int maxIndex = value1 > value2 ? index * 2 + 1 : index * 2 + 2;      
            if (nums[index] < nums[maxIndex]) {
                int temp = nums[index];
                nums[index] = nums[maxIndex];
                nums[maxIndex] = temp;
                index = maxIndex;
            } else {
                break;
            }
        }
    }
}

//-----------------------------------------------------------------------------------------------------
// Approach #4
// Advanced Heapsort version.
class Solution {
    public int findKthLargest(int[] nums, int k) {
        heapify(nums, nums.length - 1);
        int res = nums[0];
        for (int i = 0; i < k; i++) {
            percolateDown(nums, 0, nums.length - 1 - i);
            res = nums[0];
            nums[0] = nums[nums.length - 1 - i];
            nums[nums.length - 1 - i] = res;
        }
        return res;
    }
    
    private void heapify(int[] nums, int limit) {
        int newLimit = limit / 2;
        for (int i = newLimit; i >= 0; i--) {
            percolateDown(nums, i, limit);
        }
    }
    
    private void percolateDown(int[] nums, int point, int limit) {
        int index = point;
        while (index <= limit && (index * 2 + 1 <= limit || index * 2 + 2 <= limit)) {
            int value1 = nums[index * 2 + 1];
            int value2 = index * 2 + 2 <= limit ? nums[index * 2 + 2] : Integer.MIN_VALUE;
            int maxIndex = value1 > value2 ? index * 2 + 1 : index * 2 + 2;      
            if (nums[index] < nums[maxIndex]) {
                int temp = nums[index];
                nums[index] = nums[maxIndex];
                nums[maxIndex] = temp;
                index = maxIndex;
            } else {
                break;
            }
        }
    }
}

//---------------------------------------------------------------------------------------------------
// Approach #5
// Use built-in Priority Queue.
class Solution {
    public int findKthLargest(int[] nums, int k) {
        Queue<Integer> q = new PriorityQueue<>((n1, n2) -> (n2 - n1));
        for (int num : nums) {
            q.offer(num);
        }
        for (int i = 0; i < k - 1; i++) {
            q.poll();
        }
        return (int)q.poll();
    }
}

//------------------------------------------------------------------------------------------
// Approach #6
