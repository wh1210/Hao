/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int left;
    public List<List<Integer>> verticalOrder(TreeNode root) {
        left = 0;
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res;
        getLeftLevel(root, 0);
        for (int i = 0; i < left; i++) {
            res.add(new ArrayList<>());
        }
        
        Queue<pair> q = new LinkedList<>();
        q.add(new pair(root, left));
        
        while (!q.isEmpty()) {
            pair tempPair = q.poll();
            int level = tempPair.level;
            TreeNode tempRoot = tempPair.root;
            if (level + 1 > res.size()) {
                res.add(new ArrayList<>());
            }
            res.get(level).add(tempRoot.val);
            if (tempRoot.left != null) q.offer(new pair(tempRoot.left, level - 1));
            if (tempRoot.right != null) q.offer(new pair(tempRoot.right, level + 1));
        }
        
        return res;
    }
     
    private void getLeftLevel(TreeNode root, int level) {
        if (root == null) return;
        getLeftLevel(root.left, level + 1);
        getLeftLevel(root.right, level - 1);
        this.left = Math.max(left, level);
    }
    
    
    private class pair {
        public TreeNode root;
        public int level;
        
        public pair(TreeNode root, int level) {
            this.root = root;
            this.level = level;
        }
    }
}
