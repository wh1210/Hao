class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums = new int[9];
        for (int i = 0; i < nums.length; i++) {
            nums[i] = i + 1;
        }
        List<List<Integer>> res = new ArrayList<>();
        backtrack(nums, k, n, res, new ArrayList<>(), 0, 0, 0);
        return res;
    }
    
    private void backtrack(int[] nums, int k, int target, List<List<Integer>> res, 
                           List<Integer> temp, int sum, int size, int index) {
        if (sum > target) return;
        
        if (size == k && sum == target) {
            res.add(new ArrayList<>(temp));
            return;
        }
        
        for (int i = index; i < nums.length; i++) {
            temp.add(nums[i]);
            sum += nums[i];
            size++;
            backtrack(nums, k, target, res, temp, sum, size, i + 1);
            size--;
            sum -= nums[i];
            temp.remove(temp.size() - 1);
        }
    }
}
