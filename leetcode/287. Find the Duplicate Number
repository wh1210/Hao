//-----------------------------------------------------------------------
// Sort
class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i-1]) {
                return nums[i];
            }
        }

        return -1;
    }
}

//---------------------------------------------------------------------------------
// Use set
class Solution {
    public int findDuplicate(int[] nums) {
        Set<Integer> seen = new HashSet<Integer>();
        for (int num : nums) {
            if (seen.contains(num)) {
                return num;
            }
            seen.add(num);
        }

        return -1;
    }
}

//----------------------------------------------------------------------------------------
// Cycle detecting
class Solution {
    public int findDuplicate(int[] nums) {
        
        int tort = nums[0];
        int hare = nums[0];
        do {
            hare = nums[nums[hare]];
            tort = nums[tort];
        } while (tort != hare);
            
        int ptr1 = nums[0];
        int ptr2 = hare;
        
        while (ptr1 != ptr2) {
            ptr1 = nums[ptr1];
            ptr2 = nums[ptr2];
        }
        
        return ptr1;
    }
}

