//-------------------------------------------------------
// Initial solution. using HashMap.
class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        
        for (int i = 0; i < s.length(); i++) {
            if (!map.containsKey(s.charAt(i))) {
                map.put(s.charAt(i), 0);
            }
            map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
        }
        
        for (int i = 0; i < s.length(); i++) {
            if (map.get(s.charAt(i)) == 1) {
                return i;
            }
        }
        
        return -1;  
    }
}

//-------------------------------------------------------------------

class Solution {
    public int firstUniqChar(String s) {
        int[] table = new int[26];
        
        for (int i = 0; i < s.length(); i++) {
            table[s.charAt(i) - 'a']++;
        }
        
        for (int i = 0; i < s.length(); i++) {
            if (table[s.charAt(i) - 'a'] == 1) {
                return i;
            }
        }
        
        return -1;
    }
}


//-=---------------------------------------------------------------

//Using s.toCharArray()
class Solution {
    public int firstUniqChar(String s) {
        int[] table = new int[26];
        
        for (char c : s.toCharArray()) {
            table[c - 'a']++;
        }
        
        for (int i = 0; i < s.length(); i++) {
            if (table[s.charAt(i) - 'a'] == 1) {
                return i;
            }
        }
        
        return -1;
    }
}
