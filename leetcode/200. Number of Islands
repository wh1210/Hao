class Solution {
    public int numIslands(char[][] grid) {
        if (grid.length == 0) return 0;
        int res = 0;
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (!visited[i][j] && grid[i][j] == '1') {
                    res++;
                    helper(visited, grid, i, j);
                }
            }
        }
        return res;
    }
    
    private void helper(boolean[][] visited, char[][] grid, int i, int j) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j] || grid[i][j] == '0') return;
        visited[i][j] = true;
        helper(visited, grid, i + 1, j);
        helper(visited, grid, i - 1, j);
        helper(visited, grid, i, j + 1);
        helper(visited, grid, i, j - 1);
    }
}
