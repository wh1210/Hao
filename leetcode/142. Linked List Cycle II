//----------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

// Using set
public class Solution {
    public ListNode detectCycle(ListNode head) {
        HashSet<ListNode> set = new HashSet<>();
        ListNode curr = head;
        while (curr != null) {
            if (set.contains(curr)) return curr;
            set.add(curr);
            curr = curr.next;
        }
        return null;
    }
}

//------------------------------------------------------------
// Cycle detecting.
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

// Cycle detecting
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if (head == null) return null;
        ListNode pointer1 = hasCycle(head);
        if (pointer1 == null) return null;
        ListNode pointer2 = head;
        while (pointer1 != pointer2) {
            pointer1 = pointer1.next;
            pointer2 = pointer2.next;
        }
        return pointer1;
    }
    
    private ListNode hasCycle(ListNode head) {
        // All Start from index 0.
        ListNode hare = head;
        ListNode tort = head;
        
        while (hare != null && hare.next != null) {
            tort = tort.next;
            hare = hare.next.next;
            
            if (hare == tort) return hare;
        }
        
        return null;
    }
}
