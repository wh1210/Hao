//------------------------------------------------------------
personal approach
t: O(n)
s: O(1)
class Solution {
    public int maxDistToClosest(int[] seats) {
        int distance = 0;
        int res = 0;
        boolean leftHasOne = false;
        for (int i  = 0; i < seats.length; i++) {
            if (seats[i] == 0) {
                distance++;
                if (i == seats.length - 1) {
                    res =  Math.max(res, distance);
                }
            } else {
                res = Math.max(res, leftHasOne ? ((distance + 1) / 2) : distance);
                leftHasOne = true;
                distance = 0;
            }
        }
        return res;
    }
}


//----------------------------------------------------
Another two-pointer approach
class Solution {
    public int maxDistToClosest(int[] seats) {
        int i , j , res = 0;
        for (i = 0, j = 0; j < seats.length; j++) {
            if (seats[j] == 1) {
                if (i != 0) {
                    res = Math.max(res, (j - i + 1) / 2);
                } else {
                    res = Math.max(res, j);
                }   
                i = j + 1;
            } 
        } 
        res = Math.max(res, seats.length - i);
        return res;
    }
}
