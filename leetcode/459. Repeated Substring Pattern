class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int point = 1;
        while (point < s.length() / 2 + 1) {
            if (s.charAt(point) == s.charAt(0)) {
                if (isSubstring(s, s.substring(0, point))) return true;
            }
            point++;
        }
        
        return false;
    }
    
    private boolean isSubstring(String s, String sub) {
        int length = s.length();
        int sublength = sub.length();
        if (length % sublength != 0) return false;
        if (length / sublength <= 1) return false;
        int count = length / sublength;
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < count; i++) {
            str.append(sub);
        }
        return s.equals(str.toString());
    }
}

//---------------------------------------------------------------------
class Solution {
    // Tricky solution
    public boolean repeatedSubstringPattern(String str) {
        String s = str + str;
        return s.substring(1, s.length() - 1).contains(str);
    }
}
