/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        if (root == null) return 0;
        int d = diameter(root);
        return Math.max(d, Math.max(diameterOfBinaryTree(root.left), diameterOfBinaryTree(root.right)));
    }
    
    private int depthOfTree(TreeNode root, int depth) {
        if (root == null) return depth;
        int left = depthOfTree(root.left, depth + 1);
        int right = depthOfTree(root.right, depth + 1);
        return Math.max(left, right);
    }
    
    private int diameter(TreeNode root) {
        if (root == null) return 0;
        int left = depthOfTree(root.left, 0);
        int right = depthOfTree(root.right, 0);
        return left + right;
    }
}

// class Solution {
//     public int diameterOfBinaryTree(TreeNode root) {
//         if (root == null) return 0;
        
//         int depth = calculateDepth(root.left) + calculateDepth(root.right);
        
//         int left = diameterOfBinaryTree(root.left);
//         int right = diameterOfBinaryTree(root.right);        
        
//         return Math.max(depth, Math.max(left, right));
//     }
    
//     private int calculateDepth(TreeNode root) {
//         if (root == null) return 0;
        
//         return 1 + Math.max(calculateDepth(root.left), calculateDepth(root.right));        
//     }
// }
