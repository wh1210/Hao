//-----------------------------------------------------------------------------------------
// Approach one:
// Using heap/priority queue with Comparator interface and anonymous method.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

// Using heap
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) return null;
        
        PriorityQueue<ListNode> q = new PriorityQueue<>(lists.length, new Comparator<ListNode>() {
            @Override
            public int compare(ListNode l1, ListNode l2) {
                if (l1.val > l2.val) {
                    return 1;
                } else if (l1.val < l2.val) {
                    return -1;
                } else {
                    return 0;
                }
            }
        });
        
        ListNode prehead = new ListNode(0);
        ListNode curr = prehead;
        
        for (ListNode list : lists) {
            if (list != null) q.add(list);
        }
        
        while (!q.isEmpty()) {
            ListNode list = q.poll();
            curr.next = list;
            curr = curr.next;
            
            if (list.next != null) {
                list = list.next;
                q.add(list);
            }
        }
        
        return prehead.next;
    }
}
