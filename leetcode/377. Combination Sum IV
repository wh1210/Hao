//-------------------------------------------------------------
// TLE
class Solution {
    public int res;
    public int combinationSum4(int[] nums, int target) {
        res = 0;
        helper(nums, 0, target);
        return res;
    }
    
    private void helper(int[] nums, int sum, int target) {
        if (sum > target) return;
        
        if (sum == target) {
            res++;
            return;
        }
        
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            helper(nums, sum, target);
            sum -= nums[i];
        }
    }
}

//------------------------------------------------------------------
// Recursive
class Solution {
    public int combinationSum4(int[] nums, int target) {
        if (target == 0) return 1;
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (target >= nums[i]) {
                res += combinationSum4(nums, target - nums[i]);
            }
        }
        return res;
    }
}


//---------------------------------------------------------
// Memoization
class Solution {
    public int combinationSum4(int[] nums, int target) {
        int[] memo = new int[target + 1];
        Arrays.fill(memo, -1);
        memo[0] = 1;
        return helper(nums, memo, target);
    }
    
    private int helper(int[] nums, int[] memo, int target) {
        if (memo[target] != -1) {
            return memo[target];
        }
        
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (target >= nums[i]) {
                res += helper(nums, memo, target - nums[i]);
            }
        }
        memo[target] = res;
        return memo[target];
    }
}

//---------------------------------------------------------
// Bottom-up DP
class Solution {
    public int combinationSum4(int[] nums, int target) {
        int[] memo = new int[target + 1];
        memo[0] = 1;
        for (int i = 1; i < target + 1; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i >= nums[j]) {
                    memo[i] += memo[i - nums[j]];
                }
            }
        }
        return memo[target];
    }
}
