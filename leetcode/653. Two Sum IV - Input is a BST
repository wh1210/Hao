//-------------------------------------------------------------------------
// Recursive way
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *    m TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        return findTargetHelper(root, root, k);
    }
    
    private boolean findTargetHelper(TreeNode overallRoot, TreeNode root, int k) {
        if (root == null) return false;
        boolean left = findTargetHelper(overallRoot, root.left, k);
        boolean right = findTargetHelper(overallRoot, root.right, k);
        return left || right || checkTree(overallRoot, k - root.val, k);
    }

    private boolean checkTree(TreeNode root, int target, int k) {
        if (root == null) return false;
        if (root.val == target && root.val + root.val != k) return true;
        if (root.val < target) return checkTree(root.right, target, k);
        return checkTree(root.left, target, k);
    }
}

//-----------------------------------------------------------------------------------------
// One path
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        HashSet<Integer> set = new HashSet<>();
        return findTargetHelper(root, set, k); 
    }
    
    private boolean findTargetHelper(TreeNode root, HashSet<Integer> set, int k) {
        if (root == null) return false;
        if (set.contains(k - root.val)) {
            return true;
        } else {
            set.add(root.val);
            return findTargetHelper(root.left, set, k) || findTargetHelper(root.right, set, k);
        }   
    }
}
