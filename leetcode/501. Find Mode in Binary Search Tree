/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] findMode(TreeNode root) { 
        if (root == null) return new int[] {};
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        while (!q.isEmpty()) {
            TreeNode temp = q.poll();
            if (temp == null) continue;
            map.put(temp.val, map.getOrDefault(temp.val, 1) + 1);  
            max = Math.max(max, map.get(temp.val));
            q.offer(temp.left);
            q.offer(temp.right);
        }
        List<Integer> list = new ArrayList<>(); 
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == max) list.add(entry.getKey());
        }
        
        int[] res = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            res[i] = list.get(i);
        }
        
        return res;
    }
}

//----------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// This is BST, so inorder traversal can provide ascending number.
class Solution {
    public int currVal;
    public int currCount;
    public int size;
    public int largestCount;
    public int[] res;
    
    public int[] findMode(TreeNode root) { 
        inOrder(root);
        res = new int[size];
        currVal = 0;
        currCount = 0;
        size = 0;
        inOrder(root);
        return res;
    }
    
    private void inOrder(TreeNode root) {
        if (root == null) return;
        inOrder(root.left);
        if (root.val == currVal) {
            currCount++;
        } else if (root.val != currVal) {
            currVal = root.val;
            currCount = 1;
        }
        
        if (currCount > largestCount) {
            largestCount = currCount;
            size = 1;
        } else if (currCount == largestCount) {
            size++;
            if (res != null) {
                res[size - 1] = currVal;
            }
        }
        inOrder(root.right);  
    }
}
