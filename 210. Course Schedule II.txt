class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegrees = new int[numCourses];

        HashMap<Integer, List<Integer>> adjacencyList = new HashMap<>();
        
        for (int[] arr : prerequisites) {
            if (adjacencyList.get(arr[1]) == null) {
                adjacencyList.put(arr[1], new ArrayList<>());
            }
            adjacencyList.get(arr[1]).add(arr[0]);
            indegrees[arr[0]]++;
        }
        
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) s.push(i);
        }
        
        int[] res = new int[numCourses];
        int count = 0;
        while (!s.isEmpty()) {
            int vertex = s.pop();
            res[count] = vertex;
            count++;
            if (adjacencyList.get(vertex) == null) continue;
            for (int v : adjacencyList.get(vertex)) {
                indegrees[v]--;
                if (indegrees[v] == 0) {
                    s.push(v);
                }
            }
        }
        
        return count == numCourses ? res : new int[] {};
    }
}
