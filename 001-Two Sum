These are personal answers for leetcode 001-Two Sum:

// brute force
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (nums[i] + nums[j] == target && i != j) {
                    return new int[] {i, j};
                }
            }
        }
        throw new IllegalArgumentException("No such answer.");
    }
}


// Two-hash table
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> table1 = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            table1.put(nums[i], i);
        }
        int complement = 0;
        for (int i = 0; i < nums.length; i++) {
            complement = target - nums[i];
            if (table1.containsKey(complement) && table1.get(complement) != i) {
                return new int[] {i, table1.get(complement)};
            }
        }
        throw new IllegalArgumentException("No such answer.");
    }
}


// One hash table
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> table = new HashMap<>(); 
        int complement = 0;
        for (int i = 0; i < nums.length; i++) { 
            complement = target - nums[i];
            if (table.containsKey(complement)) {
                return new int[] {table.get(complement), i};
            }
            table.put(nums[i], i);
        }
        throw new IllegalArgumentException("No such answer");
    }
}
