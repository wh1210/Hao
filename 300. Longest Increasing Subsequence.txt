//------------------------------------------------------------------------
// Approach #1
// Recursion
class Solution {
    public int lengthOfLIS(int[] nums) {
        return helper(nums, Integer.MIN_VALUE, 0);
    }
    
    private int helper(int[] nums, int prev, int curPos) {
        if (curPos == nums.length) return 0;
        
        int taken = 0;
        if (nums[curPos] > prev) taken = 1 + helper(nums, nums[curPos], curPos + 1);
        int notTaken = helper(nums, prev, curPos + 1);
        
        return Math.max(taken, notTaken);
    }
}

//-------------------------------------------------------------------------------------
// Approach #2
// Recursion with memoization.
class Solution {
    public int lengthOfLIS(int[] nums) {
        int[][] memo = new int[nums.length + 1][nums.length];
        for (int[] l : memo) {
            Arrays.fill(l, -1);
        }
        return helper(nums, -1, 0, memo);
    }
    
    private int helper(int[] nums, int prePos, int curPos, int[][] memo) {
        if (curPos == nums.length) return 0;
        if (memo[prePos + 1][curPos] >= 0) return memo[prePos + 1][curPos];
        
        int taken = 0;
        if (prePos < 0 || nums[curPos] > nums[prePos]) taken = 1 + helper(nums, curPos, curPos + 1, memo);
        int notTaken = helper(nums, prePos, curPos + 1, memo);
        
        memo[prePos + 1][curPos] = Math.max(taken, notTaken);
        return memo[prePos + 1][curPos];
        
    }
}

//-----------------------------------------------------------------------------------
// Approach #3
// DP
class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums.length == 0) return 0;
        int[] dp = new int[nums.length];
        Arrays.fill(dp, -1);
        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            int res = 0;
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    res = Math.max(res, dp[j]);
                }
            }
            res++;
            dp[i] = res;
            ans = Math.max(ans, res);
        }
        return ans;
    }
}


//-----------------------------------------------------------------------------------
//Approach #4
// Binary Search DP
class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int len = 0;
        for (int num : nums) {
            int index = Arrays.binarySearch(dp, 0, len, num);
            
            if (index < 0) index = -(index + 1);
            
            dp[index] = num;
            if (index == len) len++;
            
        }
        return len;
    }
}
