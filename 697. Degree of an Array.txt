// personal solution with HashMap<Interger, List<Integer>>

class Solution {
    public int findShortestSubArray(int[] nums) {
        HashMap<Integer, List<Integer>> table = new HashMap<>();
        
        int result = Integer.MAX_VALUE;
        int maxsize = Integer.MIN_VALUE;
        int max;
        for (int i = 0; i < nums.length; i++) {
            if (!table.containsKey(nums[i])) {
                table.put(nums[i], new ArrayList<>());
            }
            table.get(nums[i]).add(i);
            if (table.get(nums[i]).size() > maxsize) {
                maxsize =  table.get(nums[i]).size();
                max = nums[i];
                result = table.get(nums[i]).get(table.get(nums[i]).size() - 1) -  table.get(nums[i]).get(0) + 1;
            } else if (table.get(nums[i]).size() == maxsize) {
                int tempresult = table.get(nums[i]).get(table.get(nums[i]).size() - 1) -  table.get(nums[i]).get(0) + 1;
                if (tempresult < result) {
                    result = tempresult;
                    max = nums[i];
                } 
            }
        }
        
        return result;
    }
}

// Another approach is use three hashmaps.
// And a useful method called: Collection.max(HashMap.values());
