//(based on)https://leetcode.com/problems/top-k-frequent-elements/discuss/81635/3-Java-Solution-using-Array-MaxHeap-TreeMap?page=1
//----------------------------------------------------------------------------------------------------
// Approach 1

// Bucket
// Using an array to store number into different bucket whose index is the frequency.

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        List<Integer>[] buckets = new LinkedList[nums.length + 1];
        
        for (int key : map.keySet()) {
            if (buckets[map.get(key)] == null) buckets[map.get(key)] = new LinkedList<>();
            buckets[map.get(key)].add(key);
        }
        
        List<Integer> res = new ArrayList<>();
        
        for (int i = buckets.length - 1; i >= 0; i--) {
            if (buckets[i] != null) {
                for (int temp : buckets[i]) {
                    res.add(temp);
                    k--;
                    if (k == 0) return res;
                }
            }
        }
        
        throw new IllegalArgumentException();
        
        
    }
}

//-------------------------------------------------------------------------------------------
// Approach 2

// using hashMap to store the frequency and using treeMap to sort

// use treeMap. Use freqncy as the key so we can get all freqencies in order
public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
        
        TreeMap<Integer, List<Integer>> freqMap = new TreeMap<>();
        for(int num : map.keySet()){
           int freq = map.get(num);
           if(!freqMap.containsKey(freq)){
               freqMap.put(freq, new LinkedList<>());
           }
           freqMap.get(freq).add(num);
        }
        
        List<Integer> res = new ArrayList<>();
        while(res.size()<k){
            Map.Entry<Integer, List<Integer>> entry = freqMap.pollLastEntry();
            res.addAll(entry.getValue());
        }
        return res;
    }
}

//---------------------------------------------------------------------------------------------------
// Using maxHeap.
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int num : nums) {
            if (!map.containsKey(num)) {
                map.put(num, 0);
            }
            map.put(num, map.get(num) + 1);
        }
        
        Queue<Map.Entry<Integer, Integer>> q = new PriorityQueue<>((e1,e2) -> (e2.getValue() - e1.getValue()));
        
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            q.offer(entry);
        }
        
        List<Integer> res = new ArrayList<>();
        while (k > 0) {
            res.add(q.poll().getKey());
            k--;
        }
        
        return res;
    }
}
